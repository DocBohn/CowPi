/**************************************************************************//**
 *
 * @file pin_interrupts.h
 *
 * @author Christopher A. Bohn
 *
 * @brief Functions to register/deregister interrupt handlers for
 * pin-based interrupts
 *
 * Provides functions to register and deregister functions to handle to
 * interrupts that are fired due to changes on the microcontroller's pins.
 * A function specific to each pin (or combination of pins) can be registered.
 * There is no option for only-rising or only-falling interrupt handlers; the
 * same function must service all changes on the pin(s) that it is registered
 * to service.
 *
 ******************************************************************************/

/* CowPi (c) 2021-24 Christopher A. Bohn
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef COWPI_PIN_INTERRUPTS_H
#define COWPI_PIN_INTERRUPTS_H

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief Registers a function to service pin-based interrupts triggered by
 * logic-level changes on one or more pins.
 *
 * The registered function will be invoked whenever there is a low-to-high or
 * a high-to-low change. If behavior is only required for a rising edge or for
 * a falling edge, or if the behavior for rising and falling edges must
 * differ, then the function should have a conditional to determine the
 * direction of the change.
 *
 * If the change is generated by a mechanical device, then the isr function is
 * responsible for debouncing if there is not a hardware debouncing circuit.
 *
 * The <code>interrupt_mask</code> argument is used to specify which pins will
 * be serviced by the registered function. Bit0 corresponds to Pin 0, Bit1
 * corresponds to Pin 1, and so on. A 1 in a particular bit indicates that the
 * function is to be registered for changes on the corresponding pin. If more
 * than one bit has a 1, then the function will be registered for each of the
 * corresponding pins. If there previously was a function registered to handle
 * changes on a specified pin, then the new function will replace the old
 * function. A bit with a 0 signifies nothing more than that the function is
 * not being registered to service changes on that pin at this time.
 *
 * @param interrupt_mask A bit vector specifying which pins will be serviced by
 *      the registered ISR
 * @param isr The function that will service interrupts triggered by changes on
 *      the specified pins
 */
void cowpi_register_pin_ISR(uint32_t interrupt_mask, void (*isr)(void));

/**
 * @brief De-registers the servicing function, if any, for the specified pin(s).
 *
 * After this function terminates, a logic-level change on the specified pin(s)
 * will no longer be serviced custom function. It is possible that an interrupt
 * would still fire for changes on the pin; if so, it will be serviced by a
 * default, empty function.
 *
 * The <code>interrupt_mask</code> argument is used to specify which pins will
 * no longer be serviced by a custom function. Bit0 corresponds to Pin 0, Bit1
 * corresponds to Pin 1, and so on. A 1 in a particular bit indicates that the
 * pin's ISR is to be deregistered. If more than one bit has a 1, then the ISRs
 * for each of the pins will be deregistered. A bit with a 0 signifies nothing
 * more than that no deregistration actions are to be take for that pin at this
 * time.
 *
 * @param interrupt_mask A bit vector specifying which pins will no longer be
 *      serviced by an ISR
 */
void cowpi_deregister_pin_ISR(uint32_t interrupt_mask);

#ifdef __cplusplus
} // extern "C"
#endif

#endif //COWPI_PIN_INTERRUPTS_H
